#!/usr/bin/env python3
import sys
import os
import logging
from optparse import OptionParser
import bpy
from openforge.output import RedirectedStdStreams, redirect_output

def option_parser():
	usage = "usage: %prog [file name]"
	parser = OptionParser(usage=usage)
	return parser

def main():
	logging.basicConfig(stream=sys.stderr, level=logging.ERROR)
	logger = logging.getLogger('openforge')
	parser = option_parser()
	(options, args) = parser.parse_args()
	if len(args) != 1:
		sys.stderr.write("Requires 1 arguments to run\n")
		sys.exit(1)
	manifold_check(args[0])
	sys.stdout.flush()
	redirect_output(sys.stderr, os.devnull)
	redirect_output(sys.stdout, os.devnull)

def set_object_active(obj):
	bpy.context.scene.objects.active = obj

def import_file(infile):
	with RedirectedStdStreams(sys.stderr, os.devnull):
		with RedirectedStdStreams(sys.stdout, os.devnull):
			names = set([o.name for o in bpy.data.objects])
			bpy.ops.import_mesh.stl(filepath=infile)
			newnames = set([o.name for o in bpy.data.objects])
			name = newnames.difference(names).pop()
			sys.stdout.flush()
			return bpy.data.objects[name]

def manifold_check(infile):
	obj = import_file(infile)
	set_object_active(obj)
	bpy.ops.object.mode_set(mode="EDIT")
	bpy.ops.mesh.select_all(action='DESELECT')
	bpy.ops.mesh.select_non_manifold()
	bpy.ops.object.mode_set(mode="OBJECT")
	verts = len([v for v in obj.data.vertices if v.select])
	if(verts) > 0:
		print(infile)

if __name__ == '__main__':
	main()

