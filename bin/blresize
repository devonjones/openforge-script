#!/usr/bin/env python3
import sys
import os
import os.path
import logging
import bpy
from optparse import OptionParser
from openforge.output import RedirectedStdStreams, redirect_output

def option_parser():
	usage = "usage: %prog [name]"
	parser = OptionParser(usage=usage)
	parser.add_option(
		"-d", "--dry-run", dest="dry",
		help="Dry xirRun to show you what files would be tested",
		default=False, action="store_true")
	parser.add_option(
		"-x", dest="scale_x", type="float", default=1.0,
		help="Scale to use for X")
	parser.add_option(
		"-y", dest="scale_y", type="float", default=1.0,
		help="Scale to use for Y")
	parser.add_option(
		"-z", dest="scale_z", type="float", default=1.0,
		help="Scale to use for Z")
	parser.add_option(
		"--old", dest="old", default="25mm",
		help="Filename portion to replace")
	parser.add_option(
		"--new", dest="new", default="inch",
		help="Filename portion to add")
	parser.add_option(
		"-o", "--output", dest="output",
		help="Output directory (required)")
	return parser

def main():
	logging.basicConfig(stream=sys.stderr, level=logging.ERROR)
	logger = logging.getLogger('openforge')
	parser = option_parser()
	(options, args) = parser.parse_args()
	if len(args) < 1:
		sys.stderr.write("Requires 1 arguments to run\n")
		sys.exit(1)
	if options.output == None:
		sys.stderr.write("-o/--output required\n")
		sys.exit(1)
	fix_directory(options)
	for arg in args:
		resize(options, arg)
	sys.stdout.flush()
	redirect_output(sys.stdout, os.devnull)

def fix_directory(options):
	options.output = os.path.abspath(os.path.expanduser(options.output))
	if not os.path.exists(options.output):
		os.makedirs(options.output)

def new_filename(options, oldfile):
	fn = os.path.split(oldfile)[1]
	if fn.find(options.old) > -1:
		return fn.replace(options.old, options.new)
	else:
		sys.stdout.write("Filename %s does not contain %s\n" % (oldfile, options.old))
def set_object_active(obj):
	bpy.context.scene.objects.active = obj

def import_file(infile):
	with RedirectedStdStreams(sys.stdout, os.devnull):
		names = set([o.name for o in bpy.data.objects])
		for name in names:
			bpy.data.objects.remove(bpy.data.objects[name])
		bpy.ops.import_mesh.stl(filepath=infile)
		newnames = [o.name for o in bpy.data.objects]
		#name = newnames.difference(names).pop()
		sys.stdout.flush()
		return bpy.data.objects[newnames[0]]

def export_file(obj, dirname, newfile):
	obj.select  = True
	bpy.context.scene.objects.active = obj
	bpy.ops.export_mesh.stl(filepath="%s/%s" % (dirname,  newfile))

def set_scale(obj, x=None, y=None, z=None):
	set_object_active(obj)
	#print("Set Scale: [%s,%s,%s]" %(x,y,z))
	if x != None:
		obj.scale.x = x
	if y != None:
		obj.scale.y = y
	if z != None:
		obj.scale.z = z

def resize(options, filename):
	newfn = new_filename(options, filename)
	obj = import_file(filename)
	set_scale(obj, options.scale_x, options.scale_y, options.scale_z)
	export_file(obj, options.output, newfn)

if __name__ == '__main__':
	main()

