#!/usr/bin/env python3
import sys
import os
import logging
from optparse import OptionParser
from openforge.operations import open_blend, save_blend, union
from openforge.output import RedirectedStdStreams, redirect_output

def option_parser():
	usage = "usage: %prog [file name] [output file name]"
	parser = OptionParser(usage=usage)
	return parser

def main():
	logging.basicConfig(stream=sys.stderr, level=logging.ERROR)
	logger = logging.getLogger('openforge')
	parser = option_parser()
	(options, args) = parser.parse_args()
	if len(args) != 2:
		sys.stderr.write("Requires 2 arguments to run\n")
		sys.exit(1)
	unionize(args[0], args[1])

def unionize(infile, outfile):
	objects = sys.stdin.readlines()
	base_object = objects.pop(0)
	print(base_object)
	for element in objects:
		newpid = os.fork()
		if newpid == 0:
			unionize_objects(infile, outfile, base_object, element)
			sys.exit(0)
		else:
			os.waitpid(newpid, 0)
			print("\n")
		infile = outfile

def unionize_objects(infile, outfile, base, added):
	with RedirectedStdStreams(sys.stderr, os.devnull):
		with RedirectedStdStreams(sys.stdout, os.devnull):
			import bpy
	print(added)
	open_blend(infile)
	o1 = bpy.data.objects[base.strip()]
	o2 = bpy.data.objects[added.strip()]
	union(o1, o2)
	save_blend(outfile)

if __name__ == '__main__':
	main()

